@startuml
class Page {
+ int ref;                        
+ uint32_t flags;                 
+ unsigned int property;          
+ list_entry_t page_link;         
}
class pmm {
+ void pmm_init(void);

+ struct Page *alloc_pages(size_t n);
+ void free_pages(struct Page *base, size_t n);
+ size_t nr_free_pages(void);

+ pte_t *get_pte(pde_t *pgdir, uintptr_t la, bool create);
+ struct Page *get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store);
+ void page_remove(pde_t *pgdir, uintptr_t la);
+ int page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm);

+ void load_esp0(uintptr_t esp0);
+ void tlb_invalidate(pde_t *pgdir, uintptr_t la);


- static struct taskstate ts
- static struct segdesc gdt[]
- static struct pseudodesc gdt_pd
+ uint8_t stack0[1024];
- static void gdt_init(void)
- static inline void lgdt(struct pseudodesc *pd)
}

class trap {
    
+ void idt_init(void);
+ void print_trapframe(struct trapframe *tf);
+ void print_regs(struct pushregs *regs);
+ bool trap_in_kernel(struct trapframe *tf);
+ void trap(struct trapframe *tf);
- static void trap_dispatch(struct trapframe *tf)
- static const char *IA32flags[]
- static struct gatedesc idt[256]
- static struct pseudodesc idt_pd
}
@enduml                                 